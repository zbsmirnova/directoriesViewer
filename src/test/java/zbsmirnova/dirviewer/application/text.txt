CLASSES and interfaces lie at the heart of the Java programming language.
They are its basic units of abstraction. The language provides many powerful
elements that you can use to design classes and interfaces. This chapter contains
guidelines to help you make the best use of these elements so that your classes and
interfaces are usable, robust, and flexible.

Item 15: Minimize the accessibility of classes and members
The single most important factor that distinguishes a well-designed component
from a poorly designed one is the degree to which the component hides its internal
data and other implementation details from other components. A well-designed
component hides all its implementation details, cleanly separating its API from its
implementation. Components then communicate only through their APIs and are
oblivious to each others’ inner workings. This concept, known as information
hiding or encapsulation, is a fundamental tenet of software design [Parnas72].
Information hiding is important for many reasons, most of which stem from
the fact that it decouples the components that comprise a system, allowing them to
be developed, tested, optimized, used, understood, and modified in isolation. This
speeds up system development because components can be developed in parallel.
It eases the burden of maintenance because components can be understood more
quickly and debugged or replaced with little fear of harming other components.

While information hiding does not, in and of itself, cause good performance, it
enables effective performance tuning: once a system is complete and profiling has
determined which components are causing performance problems (Item 67), those
components can be optimized without affecting the correctness of others. Information
hiding increases software reuse because components that aren’t tightly coupled
often prove useful in other contexts besides the ones for which they were
developed. Finally, information hiding decreases the risk in building large systems
because individual components may prove successful even if the system does not.

